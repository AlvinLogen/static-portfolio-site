name: Portfolio CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality and linting
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm install -g eslint prettier
        
    - name: Run ESLint
      run: |
        eslint src/ --ext .js --format json --output-file eslint-report.json
        eslint src/ --ext .js
        
    - name: Check code formatting
      run: prettier --check "src/**/*.{js,css,html}"
      
    - name: Upload ESLint report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json

  # Frontend testing
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: |
        npm run test -- --coverage --ci --watchAll=false
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Install Playwright
      run: npx playwright install ${{ matrix.browser }}
      
    - name: Run E2E tests
      run: |
        npm run build
        npm run serve &
        sleep 10
        npx playwright test --browser=${{ matrix.browser }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/

  # Backend API testing
  test-backend:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov requests sqlalchemy
        
    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      run: |
        python -m pytest tests/python/ -v --cov=src/python --cov-report=xml
        
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: python-coverage

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm install -g lighthouse @lhci/cli
        
    - name: Build application
      run: npm run build
      
    - name: Start server
      run: |
        npm run serve &
        sleep 15
        
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=filesystem --upload.outputDir=./lighthouse-reports
        
    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-reports
        path: lighthouse-reports/

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: |
        npm ci
        npm audit --audit-level moderate
        
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Build and deployment
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        
    - name: Generate deployment package
      run: |
        zip -r deployment-package.zip dist/ package.json package-lock.json
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment-package.zip
        retention-days: 30
        
    - name: Deploy to staging (simulate)
      run: |
        echo "Deploying to staging environment..."
        echo "Build completed at: $(date)"
        echo "Commit SHA: ${{ github.sha }}"
        
    - name: Create deployment summary
      run: |
        echo "## Deployment Summary üöÄ" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Send status notification
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "‚úÖ Pipeline completed successfully!"
        else
          echo "‚ùå Pipeline failed. Check the logs."
        fi